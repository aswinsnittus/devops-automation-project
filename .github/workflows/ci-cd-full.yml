name: 🌐 Full CI/CD Pipeline (fixed: ensure Terraform installed)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
env:
  AWS_REGION: us-east-1

jobs:
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-ui:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-ui:${{ github.sha }}

      - name: Logout
        run: docker logout

  terraform-plan:
    name: 📦 Terraform Plan
    runs-on: ubuntu-latest
    needs: build-and-push
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform init (S3 backend)
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_DYNAMODB_TABLE }}" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform fmt (check)
        run: terraform fmt -check

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: terraform plan -out=tfplan -input=false

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan

  terraform-apply:
    name: 🚀 Terraform Apply (recreate plan & apply)
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: production
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform init (ensure providers present)
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_DYNAMODB_TABLE }}" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Recreate plan (in same runner as apply to avoid lock mismatches)
        run: terraform plan -out=tfplan -input=false

      - name: Terraform apply
        run: terraform apply -auto-approve -input=false tfplan

      - name: Get public_ip output
        id: get_ip
        run: |
          echo "public_ip=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT

  deploy-check:
    name: 🌍 Verify Deployment (quick print)
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
      - name: Show deployed URL
        run: |
          echo "App should be available at http://${{ needs.terraform-apply.outputs.public_ip }}"
