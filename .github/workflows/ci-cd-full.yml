name: 🌐 Full CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  AWS_REGION: us-east-1

jobs:
  # =========================
  # 1️⃣ Build & Push Docker Image
  # =========================
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-ui:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-ui:${{ github.sha }}

      - name: Logout from Docker Hub
        run: docker logout

  # =========================
  # 2️⃣ Terraform Plan
  # =========================
  terraform-plan:
    name: 📦 Terraform Plan
    runs-on: ubuntu-latest
    needs: build-and-push
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform (S3 Backend)
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_DYNAMODB_TABLE }}" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan -input=false

      - name: Upload plan for later
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan

  # =========================
  # 3️⃣ Terraform Apply
  # =========================
  terraform-apply:
    name: 🚀 Terraform Apply (Automated)
    runs-on: ubuntu-latest
    environment: production
    needs: terraform-plan
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_DYNAMODB_TABLE }}" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Plan (recreate to match lockfile)
        run: terraform plan -out=tfplan -input=false

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false tfplan

      - name: Output Public IP
        id: output
        run: |
          PUBLIC_IP=$(terraform output -raw public_ip)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

  # =========================
  # 4️⃣ Deploy Validation
  # =========================
  deploy-check:
    name: 🌍 Verify Deployment
    runs-on: ubuntu-latest
    needs: terraform-apply

    steps:
      - name: Print public IP from Terraform
        run: |
          echo "Deployed App URL: http://${{ needs.terraform-apply.outputs.public_ip }}"
