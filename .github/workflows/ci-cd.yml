name: Full CI/CD Pipeline (build → plan → apply → deploy)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: "ci-cd-${{ github.ref }}"
  cancel-in-progress: true

env:
  TF_WORKING_DIR: terraform
  AWS_REGION: us-east-1

permissions:
  contents: read

jobs:
  build:
    name: 1️⃣ Build & Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set image tag
        id: set-tag
        run: echo "::set-output name=image_tag::${{ github.sha }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-ui:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-ui:${{ steps.set-tag.outputs.image_tag }}

      - name: Docker logout
        run: docker logout

  plan:
    name: 2️⃣ Terraform Plan
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform init (S3 backend)
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_DYNAMODB_TABLE }}" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform fmt (check)
        run: terraform fmt -check

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: terraform plan -out=tfplan -input=false

      - name: Upload tfplan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TF_WORKING_DIR }}/tfplan

  apply:
    name: 3️⃣ Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    environment: production
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download tfplan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TF_WORKING_DIR }}

      - name: Terraform apply
        run: terraform apply -auto-approve -input=false ./tfplan

      - name: Output public_ip
        id: outputs
        run: echo "public_ip=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT

  deploy:
    name: 4️⃣ Deploy to EC2
    runs-on: ubuntu-latest
    needs: apply
    steps:
      - name: Prepare SSH key
        run: |
          echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Wait for SSH to be ready
        run: |
          for i in {1..15}; do
            nc -zv ${{ needs.apply.outputs.public_ip }} 22 && break || sleep 3
          done

      - name: SSH: pull image & run container
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ needs.apply.outputs.public_ip }} << 'EOF'
            sudo docker rm -f devops-ui 2>/dev/null || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/devops-ui:latest
            sudo docker run -d --name devops-ui --restart unless-stopped -p 80:8080 ${{ secrets.DOCKERHUB_USERNAME }}/devops-ui:latest
          EOF
